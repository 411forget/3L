<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【接口】http post和get的区别]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90%E6%8E%A5%E5%8F%A3%E3%80%91http%20post%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB20180812%2F</url>
    <content type="text"><![CDATA[一、http协议简介 HTTP是一个客户端和服务器端请求和应答的标准（TCP）。客户端是终端用户，服务器端是网站。通过使用Web浏览器、网络爬虫或者其它的工具，客户端发起一个到服务器上指定端口（默认端口为80）的HTTP请求。 由HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如”HTTP/1.1 200 OK”，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。 基于HTTP协议的客户/服务器模式的信息交换过程，它分四个过程：建立连接、发送请求信息、返回响应信息、关闭连接。 二、两种 HTTP 请求方法：GET 和 POST GET 1、从服务器上获取数据2、可被缓存,保留在浏览器历史记录中3、可被收藏为书签4、安全性低5、有长度限制6、执行效率高 POST 1、向服务器传送数据；2、不会被缓存,不会保留在浏览器历史记录中3、不能被收藏为书签4、对数据长度没有要求5、安全性相对较高6、执行效率较get低]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【自动化测试】selenium+python基础]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%91selenium%2Bpython%E5%9F%BA%E7%A1%8020180812%2F</url>
    <content type="text"><![CDATA[一、selenium简介 免费的分布式的自动化测试工具； 支持多平台：windows、linux、MAC ； 支持多浏览器：ie、ff、safari、opera、chrome； 多语言C、 java、ruby、python 二、前提条件 安装浏览器（这里使用chrome）； 下载chrome driver,把chromedriver.exe存放在..\Google\Chrome\Application\文件夹下 安装python 安装selenium包 三、简单的自动化脚本示例实现功能：打开浏览器=》输入百度网址搜索=》在搜索框输入python=》点击百度一下123456789# -*- coding: utf-8 -*- from selenium import webdriverdri=webdriver.Chrome()dri.set_window_size(1200, 1000)dri.get(&quot;https://www.baidu.com&quot;)dri.find_element_by_id(&quot;kw&quot;).send_keys(&quot;python&quot;)dri.find_element_by_id(&quot;su&quot;).click()dri.quit() 四、元素定位元素定位是自动化测试的核心 定位方法主要有：（1）id ; (2) name; (3)class name ; (4) tag name ; (5) xpath ; (6) css selector ; (7) link test ; (8) partial link test ; 其中xpath定位应用比较多。 举例：type12345678910111213141516171819202122232425如要定位此input输入框，可以用以下几种方式：* id定位&gt; dri.find_element_by_id(&quot;kw&quot;).send_keys(&quot;python&quot;)* name定位&gt; dri.find_element_by_name(&quot;wd&quot;).send_keys(&quot;python&quot;)* tag name定位&gt; dri.find_element_by_tag_name(&quot;kw&quot;).send_keys(&quot;python&quot;)* class name定位&gt; dri.find_element_by_class_name(&quot;s_ipt&quot;).send_keys(&quot;python&quot;)* xpath定位&gt; dri.find_element_by_xpath(&quot;//input[@id=&apos;&apos;kw]&quot;).send_keys(&quot;python&quot;)* css定位&gt; dri.find_element_by_css(&quot;#kw&quot;).send_keys(&quot;python&quot;)如要定位此文字链接，可以用以下几种方式：```&lt;a href=&quot;http://news.baidu.com&quot; target=&quot;_blank&quot; class=&quot;mnav&quot;&gt;新闻&lt;/a&gt; link text定位 dri.find_element_by_link_text(“新闻”).send_keys(“python”) partial link test 定位 dri.find_element_by_link_text(“新闻”).send_keys(“python”) 五、浏览器操作 浏览器最大化 dri.maxmize_window() 设置浏览器宽度、高度 dri.set_window_size(500,500) 浏览器前进、后退 dri.forward()dri.back() 六、操作测试对象常用的方法有以下几种： click 点击 send_keys 输入 submit 提交 clear 清除 text 获取元素的文本信息 七、获取属性值element.get_attribute(“value”) 八、鼠标事件ActionChains类：需要先加载from selenium.webdriver.common.action_chains import ActionChains context_click() 右击 ActionChains(dri).context_click(ppp).perform() #ppp是要操作的元素 double_click() 双击 drag_and_dorp() 拖动]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript基础知识（字符串、数组、数字、算数、日期）]]></title>
    <url>%2F2018%2F08%2F06%2Fjsjichu20180806%2F</url>
    <content type="text"><![CDATA[JavaScript1、字符串方法 方法 功能 示例 charAt() 返回指定索引位置的字符 charCodeAt() 返回指定索引位置字符的 Unicode 值 concat() 连接两个或多个字符串，返回连接后的字符串 fromCharCode() 将 Unicode 转换为字符串 indexOf() 返回字符串中检索指定字符第一次出现的位置 “hello”.indexOf(‘l’) =&gt;2 lastIndexOf() 返回字符串中检索指定字符最后一次出现的位置 localeCompare() 用本地特定的顺序来比较两个字符串 match() 找到一个或多个正则表达式的匹配 replace() 替换与正则表达式匹配的子串 “hello”.replace(‘o’,’h’) search() 检索与正则表达式相匹配的值 “hello”.search(“o”)=&gt;4 slice() 提取字符串的片断，并在新的字符串中返回被提取的部分 split() 把字符串分割为子字符串数组 “hello”.split(“e”) =&gt;[‘h’,’llo’] substr() 从起始索引号提取字符串中指定数目的字符 substring() 提取字符串中两个指定的索引号之间的字符 toLocaleLowerCase() 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射 toLocaleUpperCase() 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射 toLowerCase() 把字符串转换为小写 toString() 返回字符串对象值 num.toString()=&gt;’3’ toUpperCase() 把字符串转换为大写 trim() 移除字符串首尾空白 valueOf() 返回某个字符串对象的原始值 2、数组方法 方法 功能 示例 concat() 合并两个或更多数组 [“hello”,”world”].concat(“js”) =&gt;hello,world,js join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔 pop() 删除数组的最后一个元素 push() 数组的末尾添加新的元素 reverse() 将一个数组中的元素的顺序反转排序 shift() 删除数组的第一个元素 slice() 从某个已有的数组返回选定的元素 sort() 数组排序 splice() 删除元素，并向数组添加新元素。 toString() 转换数组到字符串 unshift() 在数组的开头添加新元素 valueOf() 返回数组对象的原始值 3、数字 属性: 属性 功能 示例 MAX_VALUE JavaScript 中可表示的最大的数 Number.MAX_VALUE MIN_VALUE JavaScript 中可表示的最小的数 NEGATIVE_INFINITY 该值代表负无穷大。 POSITIVE_INFINITY 表示大于 Number.MAX_VALUE 的值。该值代表正无穷大。 NaN 该属性用于指示某个值不是数字。 isNaN() 全局函数来判断一个值是否是 NaN值 prototype 属性使您有能力向对象添加属性和方法 object.prototype.name=value constructor 返回对创建此对象的数组函数的引用。 if (test.constructor==Array) 数字方法: 方法 功能 示例 toExponential() 把对象的值转换成指数计数法。 toFixed() 把 Number 四舍五入为指定小数位数的数字 toString() 转字符串 valueOf() 返回Boolean对象原始值,如果调用该方法的对象不是Boolean,则抛出异常TypeError 4、Math(算数) 方法 功能 示例 round() 对数字进行舍入 random() 返回 0 到 1 之间的随机数 max() 返回两个给定的数中的较大的数 min() 返回两个给定的数中的较小的数 floor() 可对一个数进行下舍入。返回的是小于或等于函数参数，并且与之最接近的整数 eg.生成0-7之间的随机数document.write(Math.floor(Math.random()*7)) 5、Date日期 方法 功能 示例 getFullYear() 获取年份 var today=new Date(); today.getFullYear() getTime() 返回从 1970 年 1 月 1 日至今的毫秒数。 setFullYear() 设置具体的日期 toUTCString() 将当日的日期（根据 UTC）转换为字符串 getDay() 使用 getDay() 和数组来显示星期，而不仅仅是数字]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[怎么以站点的方式访问我们的网站-github托管]]></title>
    <url>%2F2018%2F07%2F24%2Fgitweb20180724%2F</url>
    <content type="text"><![CDATA[没有域名和服务器的前提下，怎么可以访问到我们的网页呢？可以把网页代码托管在github，同样可以以站点的方式访问。实践网址示例：https://411forget.github.io/shufa.github.io/ 1、准备条件 注册一个github账号 安装Git 在github创建一个存储库，用来存放我们页面的相关代码文件 2、git的操作方法12345678910111213…or create a new repository on the command lineecho &quot;# yufa.github.io&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin git@github.com:411forget/shufa.github.io.gitgit push -u origin master…or push an existing repository from the command linegit remote add origin git@github.com:411forget/shufa.github.io.gitgit push -u origin master…or import code from another repositoryYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.Import code 3、将本地网页的所有代码文件都push到github上注意：将需要将主页的html文件命名为index.html 最后的文件全部push上去的效果如下： 4、现在可以打开网址看一下效果具体网址是什么？ 如果打不开网址：可能是pages还是none的状态，自己设置下即可 网址打开后的效果图：]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>github+web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ruby On Rails环境配置]]></title>
    <url>%2F2018%2F07%2F22%2Fruby-on-rails-20180722%2F</url>
    <content type="text"><![CDATA[Ruby 简洁，不难理解。它可以让你快速地用代码自然 , 清晰表达想法。Ruby on Rails 是一个可以使你开发、部署、维护 web 应用程序变得简单的MVC框架。 一、准备工作 安装Ruby 2.2.2 及以上版本 安装包链接 包管理工具 RubyGems ，随 Ruby 预装。 SQLite3 数据库 Ruby 的在线资源：免费编程图书列表 二、安装 Rails 安装 Rails，请使用 RubyGems 提供的 gem install 命令： $ gem install rails 执行下面的命令来确认rails是否正确安装： $ rails –version 三、创建项目 显示“Hello, Rails!” 1、创建 $ rails new demo 这个命令会在文件夹 demo 中创建名为 demo 的 Rails 应用，然后执行 bundle install 命令安装 Gemfile 中列出的 gem 及其依赖。 2、创建 blog 应用后，进入该文件夹： $ cd E:\WorkSpaces\rubyROR\demo 3、项目文件作用如下： 4、启动 Web 服务器 ruby bin/rails server 要查看运行中的应用，请打开浏览器窗口，访问 http://localhost:3000。这时应该看到默认的 Rails 欢迎页面： 5、显示“Hello, Rails!”要让 Rails 显示“Hello, Rails!”，需要创建控制器和视图。 可以用控制器生成器来创建控制器。下面的命令告诉控制器生成器创建一个包含“index”动作的“Welcome”控制器： $ ruby bin/rails generate controller Welcome index 上述命令让 Rails 生成了多个文件和一个路由： 123456789101112131415create app/controllers/welcome_controller.rb route get &apos;welcome/index&apos;invoke erbcreate app/views/welcomecreate app/views/welcome/index.html.erbinvoke test_unitcreate test/controllers/welcome_controller_test.rbinvoke helpercreate app/helpers/welcome_helper.rbinvoke test_unitinvoke assetsinvoke coffeecreate app/assets/javascripts/welcome.coffeeinvoke scsscreate app/assets/stylesheets/welcome.scss 其中最重要的文件是控制器和视图，控制器位于 app/controllers/welcome_controller.rb ，视图位于 app/views/welcome/index.html.erb app/views/welcome/index.html.erb 添加下面的代码： Rails!```123设置应用主页config/routes.rb Rails.application.routes.draw do get ‘welcome/index’ root ‘welcome#index’end`]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby on rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ruby读写excel表格]]></title>
    <url>%2F2018%2F07%2F13%2Fruby-excel-2018073%2F</url>
    <content type="text"><![CDATA[Win32ole是访问Windows自动化的接口，可以让Ruby和Windows应用进行交互。具体说来Win32ole可以操作Word,Excel,IE,Outlook等。 一、完整代码及效果图 test1.xlsxtest2.xlsx 二、具体代码加载win32ole模块 #encoding=UTF-8 require ‘win32ole’ excel=WIN32OLE::new(“excel.Application”) 操作excel1：打开=》选择第一个sheet页=》读取表格内容=》关闭表格 work1=excel.workbooks.open(‘C:\Users\Administrator\Desktop\test\before.xlsx’)excel.visible = trueworksheet=work1.Worksheets(1)data=worksheet.Range(“A1:B#{worksheet.usedrange.rows.count}”).Valuework1.close() 操作excel2：新建=》另存为=》打开=》选择sheet1=》添加表头信息=》写入数据=》保存关闭 work2 =excel.workbooks.addwork2.saveas(‘C:\Users\Administrator\Desktop\test\test2.xlsx’) #另存为begin work2=excel.workbooks.open(‘C:\Users\Administrator\Desktop\test\test2.xlsx’) worksheet=work2.Worksheets(1) worksheet.Range(‘a1:b1’).Value= [‘序号’,’名称’] line=2 data.each{|para| puts line worksheet.Range(“a#{line}”).Value= para[0] worksheet.Range(“b#{line}”).Value= para[1] line+=1 }work2.save #保存work2.close()excel.quitrescue Exception =&gt; e excel.quit puts e.messageend 三、其他操作表格的方法对单元格的操作: 某个单元格: sheet.range(“a1”) a1到b2的值: sheet.range(“a1”, “b2”) 或 sheet.range(“a1:b2”) 第一列: sheet.range(“a:a”) 第一行: sheet.range(“1:1”) 获得单元格的值: range.text #读取值,返回为字符串格式,如果单元格内为数字,有可能会被截断小数点后的位数sheet.range(“a1”).text range.value #读取值,数字不会截断sheet.range(“a1”).value 对单元格设置值sheet.range(“a1”).value = 1.2345 调用宏定义excel.Run(‘SortByNumber’) 迭代访问表格数据: sheet.range(“a1:a5”).each{|cell| puts cell.value} sheet.range(“b1:c5”).rows.each{|row| puts row.cells(1,1).value}]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby+excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建个人博客]]></title>
    <url>%2F2018%2F07%2F05%2Fhexo-git-20180705%2F</url>
    <content type="text"><![CDATA[hexo+github+NexT 一、准备工作 注册一个github账号 安装Git Nodejs 二、git的相关配置 仓库名字必须是： username.github.io ，其中username是你的用户名； 配置SSH key（=&gt;Settings）: 提交代码到git肯定要拥有你的github权限才可以，使用ssh key来解决本地和服务 器的连接问题 三、安装hexo，搭建简单的博客框架Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有很多优秀插件和主题。 github: https://github.com/hexojs/hexo 1、安装 &gt; $ npm install -g hexo 2、在本地新建一个文件夹存放代码 $ cd /e/Workspaces/hexo/ 3、hexo初始化 $ hexo init 4、生成html $ hexo g 5、启动本地服务 $ hexo s -debug 以上操作搭建博客需要的代码都会下载到本地，如图： 6、一个基础的博客框架搞定打开localhost:4000本地可以可以看到效果 6、上传文件到git托管怎么让新建的博客，其他人也可以访问？现在需要把我们代码文件夹push到git上去托管步骤： $ cd /e/WorkSpaces/hexo/ =====进入指定目录 $ hexo clean ; hexo generate $ hexo deploy $ hexo d 6、访问我的博客https://411forget.github.io/ 四、更换主题 主题链接 这里举例使用next主题： NexT链接 使用git克隆的方式，之后的更新可以通过 git pull 来快速更新步骤如下： $ cd /e/WorkSpaces/hexo/ $ git clone https://github.com/iissnan/hexo-theme-next.git themes/next 修改 站点配置文件_config.yml中的theme: landscape改为theme: next。到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存,然后启动本地服务hexo s,打开localhost:4000本地可以可以看到效果。 五、开始写博客 $ cd /e/WorkSpaces/hexo/ $ hexo new ‘blog20180708’ 此时会在E:\WorkSpaces\hexo\source_posts文件夹下生成一个blog20180708.md文件，编写md文件，然后利用hexo g来生成； 【推荐使用csdn写博客，写完之后的md文件可以直接用于个人博客的发布。】 md文件的书写格式在csdn写作时有很好的示例提供： 六、hexo官网： hexo网址]]></content>
      <categories>
        <category>hexo相关</category>
      </categories>
      <tags>
        <tag>hexo+github+next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[休息站]]></title>
    <url>%2F2018%2F07%2F01%2Fmy-first-blog-1%2F</url>
    <content type="text"><![CDATA[老師說＂人生的起跑點都是一樣的？＂]]></content>
      <categories>
        <category>解压</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo相关</category>
      </categories>
  </entry>
</search>
